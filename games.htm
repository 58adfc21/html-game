<canvas id = 'game' width="1920" height="960"></canvas>
<script>
var canvas = document.getElementById('game');
var set = canvas.getContext('2d');

//Player Objects
var plPos = (100, 100)
var plHealth = 75;
var plHeight = 75;
var plWidth = 75;

//movement stuff
//movement stuff
var x = 100;
var y = 100;

var pJump = 0;
var jumpAllowed = false;
var pVertDown = 0;

//Keybinding
var left = false;
var up = false;
var right = false;
var down = false;
var jump = false;


//Walls in arrays.
var safeWall = [
	[300, 200, 200, 100],
	[200, 850, 500, 50],
	[200, 400, 100, 200],
	[300, 400, 400, 300]
	];
var badWall= [
	[500, 500, 200, 200],
	[550, 550, 200, 200],
	[600, 600, 200, 200],
	/*[700, 400, 100, 100]*/
	];



window.onload = function(){
	//Sets the FPS, limited by hardware's refresh rate.
	var fps = 144;
	
	//tracks when keys are pressed up and pressed down.
	document.addEventListener("keyup", keyup);
	document.addEventListener("keydown", keydown);
	
	//Sets how many times per x milliseconds an update is triggered. Limited by Hardwares refresh rate.
	setInterval((gameSettingLogic), 1000/fps);

}

function keydown(evt){
	//console.log(evt.keyCode);
	switch(evt.keyCode){
	case 37: left = true; break;
	case 38: up = true; break;
	case 39: right = true; break;
	case 40: down = true; break;
	case 32: jump = true; break;
	}
	

}

function keyup(evt){
	//console.log(evt.keyCode);
	switch(evt.keyCode){
	case 37: left = false; break;
	case 38: up = false; break;
	case 39: right = false; break;
	case 40: down = false; break;
	case 32: jump = false; break;
	}
}

function gameSettingLogic(){
	paintBackground();
	playerObject();
	collisionObjects();
	gravity();
	movement();
}

function collisionObjects(){
    normalWall();
    deathWall();

}

function movement(){
	
	var pSpeed = 2

	if (left && !checkCollision(x - pSpeed, y))
		x -= pSpeed;
	if (right && !checkCollision(x + pSpeed, y))
		x += pSpeed;
	
	if (jump && jumpAllowed){
		pVertDown = -4;
		jumpAllowed = false;
	}
	
	if (!jump && pVertDown < -2){
		pVertDown += 2;
	}
	/*if(!jump && jumpAllowed)
		y -= 1;*/
	
	/*if (up && !checkCollision(x, y - pSpeed))
		y -= pSpeed;
	if (down && !checkCollision(x, y + pSpeed))
		y += pSpeed;*/
}




function checkIntersectRect(r11, r1u, r1r, r1d, r21, r2u, r2r, r2d){
	return !(r21 > r1r || r2r < r11 ||r2u > r1d || r2d < r1u );
		
}

function checkCollision(potentX, potentY){
	var returnVal = false;
	for (var i = 0; i < safeWall.length; i++){
		if (checkIntersectRect(potentX, potentY, potentX + plWidth, potentY + plHeight, 
		safeWall[i][0], safeWall[i][1], safeWall[i][0] + safeWall[i][2], safeWall[i][1] + safeWall[i][3]))
		{
			returnVal = true; break;			
		}
	}
	
	for (var i = 0; i < badWall.length; i++){
		if (checkIntersectRect(potentX, potentY, potentX + plWidth, potentY + plHeight, 
		badWall[i][0], badWall[i][1], badWall[i][0] + badWall[i][2], badWall[i][1] + badWall[i][3]))
		{
			returnVal = true; break;			
		}
	}
	return returnVal;
}

function gravity(){
	if (!checkCollision (x, y + pVertDown)){
		
		y += pVertDown;
		pVertDown += .01;
	}
	
	else{
		for (var i = pVertDown; i > 0; i--){
			if(!checkCollision (x, y + i)){
				y += i;
				break;
			}
		}
		
		if (checkCollision (x, y + 1)){
			jumpAllowed = true;
			
		}
		
		pVertDown = 0;
	}
	
}


function normalWall(){
	set.fillStyle = '#000000';
	for (var i = 0; i < safeWall.length; i++){
		set.fillRect(safeWall[i][0], safeWall[i][1],safeWall[i][2],safeWall[i][3]);
	}
	
}

function deathWall(){
	set.fillStyle = '#FF0000';
	for (var i = 0; i < badWall.length; i++){
		set.fillRect(badWall[i][0], badWall[i][1],badWall[i][2],badWall[i][3]);
	}
	
}

function playerObject(){
	set.fillStyle = '#DEB887'
	set.fillRect(x, y, plWidth, plHeight)
}


function paintBackground(){


	set.fillStyle = '#ffb3ff';
	set.fillRect(0, 0, canvas.width, canvas.height);
	
	/*set.fillStyle = '#DEB887'
	set.fillRect(x, y, plWidth, plHeight)*/
	
	/*set.fillStyle = 'red';
	set.fillRect(x, 0, 50, 50);
	x++;*/
	
	/*set.fillStyle = 'yellow';
	set.fillRect(x, y, 50, 50);
	x++;
	y++;*/
	
}




</script>